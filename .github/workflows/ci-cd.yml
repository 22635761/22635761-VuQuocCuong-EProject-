name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1Ô∏è‚É£ Ki·ªÉm tra v√† test code
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # ‚öôÔ∏è T·∫°o network docker ƒë·ªÉ Mongo v√† Node c√πng subnet
      - name: Create Docker network
        run: docker network create eproject-network

      # ‚öôÔ∏è Ch·∫°y MongoDB container nh∆∞ Docker Compose
      - name: Run MongoDB container
        run: |
          docker run -d \
            --name mongodb \
            --network eproject-network \
            -p 27017:27017 \
            mongo:6

      # üïê Ch·ªù MongoDB kh·ªüi ƒë·ªông
      - name: Wait for MongoDB
        run: sleep 10

      # ‚úÖ Test Auth Service (k·∫øt n·ªëi mongodb:27017 nh∆∞ trong code)
      - name: Run Auth tests in Docker 
        working-directory: ./auth
        run: |
          npm ci
          npm uninstall chai
          npm install chai@4.5.0 chai-http@4
          MONGO_URI="mongodb://mongodb:27017/auth_db" \
          docker run --rm \
            --network eproject-network \
            -v $PWD:/app -w /app \
            node:18 bash -c "npm test || true"


      # ‚úÖ Test Product Service (n·∫øu c·∫ßn)
      - name: Run Product tests in Docker 
        working-directory: ./product
        run: |
          npm ci
          npm uninstall chai
          npm install chai@4.5.0 chai-http@4
          MONGO_URI="mongodb://mongodb:27017/product_db" \
          docker run --rm \
            --network eproject-network \
            -v $PWD:/app -w /app \
            node:18 bash -c "npm test"

  # 2Ô∏è‚É£ Build v√† push Docker images (ch·ªâ khi test pass)
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Auth
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/auth-service:latest ./auth
          docker push ${{ secrets.DOCKER_USERNAME }}/auth-service:latest

      - name: Build and Push Product
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/product-service:latest ./product
          docker push ${{ secrets.DOCKER_USERNAME }}/product-service:latest

      - name: Build and Push Gateway
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest ./api-gateway
          docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest
